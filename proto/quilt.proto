syntax = "proto3";

package quilt;

// The main service for managing containers
service QuiltService {
    // Creates a new container
    rpc CreateContainer (CreateContainerRequest) returns (CreateContainerResponse);
    // Gets the status of a container
    rpc GetContainerStatus (GetContainerStatusRequest) returns (ContainerStatusResponse);
    // Gets the logs of a container
    rpc GetContainerLogs (GetContainerLogsRequest) returns (stream LogStreamResponse);
    // Stops a running container
    rpc StopContainer (StopContainerRequest) returns (StopContainerResponse);
    // Removes a container
    rpc RemoveContainer (RemoveContainerRequest) returns (RemoveContainerResponse);
}

message CreateContainerRequest {
    string image_tarball_path = 1;
    repeated string command = 2;
    map<string, string> environment_variables = 3;
    // Basic resource limits - to be expanded later
    message ResourceLimits {
        int64 cpu_cores = 1; // Example: 1 for one core
        int64 memory_mb = 2; // Example: 512 for 512MB
    }
    ResourceLimits resource_limits = 4;
}

message CreateContainerResponse {
  string container_id = 1;
    string status = 2; // e.g., "PENDING", "RUNNING"
}

message GetContainerStatusRequest {
  string container_id = 1;
}

message ContainerStatusResponse {
  string container_id = 1;
    string status = 2;        // e.g., "RUNNING", "EXITED", "FAILED"
    int32 exit_code = 3;      // Only relevant if status is EXITED
    string error_message = 4; // Only relevant if status is FAILED
}

message GetContainerLogsRequest {
  string container_id = 1;
    bool follow = 2; // If true, stream logs until container exits
}

message LogStreamResponse {
    enum LogSource {
        STDOUT = 0;
        STDERR = 1;
    }
    LogSource source = 1;
    bytes content = 2;
    int64 timestamp_nanos = 3; // Optional: timestamp of the log entry
}

message StopContainerRequest {
  string container_id = 1;
    int64 timeout_seconds = 2; // Optional: how long to wait before force killing
}

message StopContainerResponse {
  string container_id = 1;
    string status = 2; // e.g., "STOPPED"
}

message RemoveContainerRequest {
  string container_id = 1;
    bool force = 2; // If true, remove even if running (will be stopped first)
}

message RemoveContainerResponse {
  string container_id = 1;
    string message = 2; // e.g., "Container removed successfully"
} 