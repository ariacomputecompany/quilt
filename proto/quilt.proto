syntax = "proto3";

package quilt;

// The main service for managing containers
service QuiltService {
    // Creates a new container with advanced features
    rpc CreateContainer (CreateContainerRequest) returns (CreateContainerResponse);
    // Gets the status of a container
    rpc GetContainerStatus (GetContainerStatusRequest) returns (GetContainerStatusResponse);
    // Gets the logs of a container
    rpc GetContainerLogs (GetContainerLogsRequest) returns (GetContainerLogsResponse);
    // Stops a running container
    rpc StopContainer (StopContainerRequest) returns (StopContainerResponse);
    // Removes a container
    rpc RemoveContainer (RemoveContainerRequest) returns (RemoveContainerResponse);
    // Executes a command in a running container
    rpc ExecContainer (ExecContainerRequest) returns (ExecContainerResponse);
    // Starts a stopped container
    rpc StartContainer (StartContainerRequest) returns (StartContainerResponse);
    // Kills a container immediately
    rpc KillContainer (KillContainerRequest) returns (KillContainerResponse);
    // Gets a container by name
    rpc GetContainerByName (GetContainerByNameRequest) returns (GetContainerByNameResponse);
    
    // Volume management
    rpc CreateVolume (CreateVolumeRequest) returns (CreateVolumeResponse);
    rpc RemoveVolume (RemoveVolumeRequest) returns (RemoveVolumeResponse);
    rpc ListVolumes (ListVolumesRequest) returns (ListVolumesResponse);
    rpc InspectVolume (InspectVolumeRequest) returns (InspectVolumeResponse);
    
    // Health and monitoring
    rpc GetHealth (GetHealthRequest) returns (GetHealthResponse);
    rpc GetMetrics (GetMetricsRequest) returns (GetMetricsResponse);
    rpc GetSystemInfo (GetSystemInfoRequest) returns (GetSystemInfoResponse);
    rpc StreamEvents (StreamEventsRequest) returns (stream ContainerEvent);
    
    // Container monitoring
    rpc ListActiveMonitors (ListActiveMonitorsRequest) returns (ListActiveMonitorsResponse);
    rpc GetMonitorStatus (GetMonitorStatusRequest) returns (GetMonitorStatusResponse);
    rpc ListMonitoringProcesses (ListMonitoringProcessesRequest) returns (ListMonitoringProcessesResponse);
    
    // Network operations
    rpc ListNetworkAllocations (ListNetworkAllocationsRequest) returns (ListNetworkAllocationsResponse);
    rpc GetContainerNetwork (GetContainerNetworkRequest) returns (GetContainerNetworkResponse);
    rpc SetContainerNetwork (SetContainerNetworkRequest) returns (SetContainerNetworkResponse);
    rpc SetupContainerNetworkPostStart (SetupContainerNetworkPostStartRequest) returns (SetupContainerNetworkPostStartResponse);
    
    // Cleanup operations  
    rpc GetCleanupStatus (GetCleanupStatusRequest) returns (GetCleanupStatusResponse);
    rpc ListCleanupTasks (ListCleanupTasksRequest) returns (ListCleanupTasksResponse);
    rpc ForceCleanup (ForceCleanupRequest) returns (ForceCleanupResponse);
}

// Container status enumeration
enum ContainerStatus {
    PENDING = 0;   // Container created but not started
    RUNNING = 1;   // Container is actively running
    EXITED = 2;    // Container finished execution
    FAILED = 3;    // Container failed to start or execute
}

// Mount type enumeration
enum MountType {
    BIND = 0;      // Bind mount from host path
    VOLUME = 1;    // Named volume
    TMPFS = 2;     // Temporary filesystem in memory
}

// Mount configuration
message Mount {
    string source = 1;              // Source path (host path for bind, volume name for volume, empty for tmpfs)
    string target = 2;              // Target path inside container
    MountType type = 3;             // Type of mount
    bool readonly = 4;              // Whether the mount is read-only
    map<string, string> options = 5; // Mount-specific options
}

// Volume information
message Volume {
    string name = 1;                // Volume name
    string driver = 2;              // Volume driver (e.g., "local")
    string mount_point = 3;         // Host path where volume is stored
    map<string, string> labels = 4; // User-defined metadata
    map<string, string> options = 5; // Driver-specific options
    uint64 created_at = 6;          // Creation timestamp
}

message CreateContainerRequest {
    // Basic container configuration
    string image_path = 1;                          // Path to container image tarball
    repeated string command = 2;                    // Command to execute in container
    map<string, string> environment = 3;           // Environment variables
    string working_directory = 4;                  // Working directory inside container
    
    // Setup commands for dynamic runtime installation
    repeated string setup_commands = 5;            // Setup commands (e.g., "npm: typescript", "pip: requests")
    
    // Resource limits
    int32 memory_limit_mb = 6;                     // Memory limit in megabytes (0 = default)
    float cpu_limit_percent = 7;                   // CPU limit as percentage (0.0 = default)
    
    // Namespace configuration
    bool enable_pid_namespace = 8;                 // Enable PID namespace isolation
    bool enable_mount_namespace = 9;               // Enable mount namespace isolation
    bool enable_uts_namespace = 10;                // Enable UTS namespace isolation (hostname)
    bool enable_ipc_namespace = 11;                // Enable IPC namespace isolation
    bool enable_network_namespace = 12;            // Enable network namespace isolation
    
    // Container identification and mode
    string name = 13;                              // Optional container name (must be unique)
    bool async_mode = 14;                          // Create as async/long-running container
    
    // Volume and mount configuration
    repeated Mount mounts = 15;                    // Mount configurations for the container
}

message CreateContainerResponse {
    string container_id = 1;                       // Generated container ID
    bool success = 2;                              // Whether creation was successful
    string error_message = 3;                      // Error message if creation failed
}

message GetContainerStatusRequest {
    string container_id = 1;                       // Container ID to query
    string container_name = 2;                     // Container name (alternative to ID)
}

message GetContainerStatusResponse {
    string container_id = 1;                       // Container ID
    ContainerStatus status = 2;                    // Current container status
    int32 exit_code = 3;                          // Exit code (if exited)
    string error_message = 4;                      // Error message (if failed)
    int32 pid = 5;                                // Process ID (if running)
    uint64 created_at = 6;                        // Creation timestamp
    uint64 memory_usage_bytes = 7;                // Current memory usage
    string rootfs_path = 8;                       // Container rootfs path
    string ip_address = 9;                        // Container IP address (ICC networking)
}

message LogEntry {
    uint64 timestamp = 1;                         // Timestamp of log entry
    string message = 2;                           // Log message content
}

message GetContainerLogsRequest {
    string container_id = 1;                      // Container ID to get logs for
    string container_name = 2;                    // Container name (alternative to ID)
}

message GetContainerLogsResponse {
    string container_id = 1;                      // Container ID
    repeated LogEntry logs = 2;                   // All log entries
}

message StopContainerRequest {
    string container_id = 1;                      // Container ID to stop
    int32 timeout_seconds = 2;                    // Timeout before force kill (optional)
    string container_name = 3;                    // Container name (alternative to ID)
}

message StopContainerResponse {
    bool success = 1;                             // Whether stop was successful
    string error_message = 2;                     // Error message if stop failed
}

message RemoveContainerRequest {
    string container_id = 1;                      // Container ID to remove
    bool force = 2;                               // Force removal even if running
    string container_name = 3;                    // Container name (alternative to ID)
}

message RemoveContainerResponse {
    bool success = 1;                             // Whether removal was successful
    string error_message = 2;                     // Error message if removal failed
}

message ExecContainerRequest {
    string container_id = 1;                      // Container ID to execute command in
    repeated string command = 2;                  // Command and arguments to execute
    string working_directory = 3;                 // Working directory (optional)
    map<string, string> environment = 4;          // Additional environment variables
    bool capture_output = 5;                      // Whether to capture and return output
    string container_name = 6;                    // Container name (alternative to ID)
    bool copy_script = 7;                         // Auto-copy local script to container
}

message ExecContainerResponse {
    bool success = 1;                             // Whether execution was successful
    int32 exit_code = 2;                         // Exit code of the executed command
    string stdout = 3;                            // Standard output (if capture_output=true)
    string stderr = 4;                            // Standard error (if capture_output=true)
    string error_message = 5;                     // Error message if execution failed
}

message StartContainerRequest {
    string container_id = 1;                      // Container ID to start
    string container_name = 2;                    // Container name (alternative to ID)
}

message StartContainerResponse {
    bool success = 1;                             // Whether start was successful
    string error_message = 2;                     // Error message if start failed
    int32 pid = 3;                               // Process ID of started container
}

message KillContainerRequest {
    string container_id = 1;                      // Container ID to kill
    string container_name = 2;                    // Container name (alternative to ID)
}

message KillContainerResponse {
    bool success = 1;                             // Whether kill was successful
    string error_message = 2;                     // Error message if kill failed
}

message GetContainerByNameRequest {
    string name = 1;                              // Container name to look up
}

message GetContainerByNameResponse {
    string container_id = 1;                      // Container ID
    bool found = 2;                               // Whether container was found
    string error_message = 3;                     // Error message if lookup failed
}

// Volume management messages
message CreateVolumeRequest {
    string name = 1;                              // Volume name
    string driver = 2;                            // Volume driver (default: "local")
    map<string, string> labels = 3;               // User-defined metadata
    map<string, string> options = 4;              // Driver-specific options
}

message CreateVolumeResponse {
    bool success = 1;                             // Whether creation was successful
    string error_message = 2;                     // Error message if creation failed
    Volume volume = 3;                            // Created volume information
}

message RemoveVolumeRequest {
    string name = 1;                              // Volume name to remove
    bool force = 2;                               // Force removal even if in use
}

message RemoveVolumeResponse {
    bool success = 1;                             // Whether removal was successful
    string error_message = 2;                     // Error message if removal failed
}

message ListVolumesRequest {
    map<string, string> filters = 1;              // Filter volumes by labels
}

message ListVolumesResponse {
    repeated Volume volumes = 1;                  // List of volumes
}

message InspectVolumeRequest {
    string name = 1;                              // Volume name to inspect
}

message InspectVolumeResponse {
    bool found = 1;                               // Whether volume was found
    Volume volume = 2;                            // Volume information
    string error_message = 3;                     // Error message if inspection failed
}

// Health and monitoring messages
message GetHealthRequest {
    // Empty request
}

message GetHealthResponse {
    bool healthy = 1;                             // Overall health status
    string status = 2;                            // Status message (e.g., "healthy", "degraded")
    uint64 uptime_seconds = 3;                    // Server uptime in seconds
    uint32 containers_running = 4;                // Number of running containers
    uint32 containers_total = 5;                  // Total number of containers
    repeated HealthCheck checks = 6;              // Individual health check results
}

message HealthCheck {
    string name = 1;                              // Check name (e.g., "database", "cgroups")
    bool healthy = 2;                             // Whether this check passed
    string message = 3;                           // Check result message
    uint64 duration_ms = 4;                       // Time taken for check
}

message GetMetricsRequest {
    string container_id = 1;                      // Optional: specific container ID
    bool include_system = 2;                      // Include system-wide metrics
    uint64 start_time = 3;                        // Start time for historical data (unix timestamp ms)
    uint64 end_time = 4;                          // End time for historical data (unix timestamp ms)
    uint32 interval_seconds = 5;                  // Aggregation interval for historical data
}

message GetMetricsResponse {
    repeated ContainerMetric container_metrics = 1; // Container-specific metrics
    SystemMetrics system_metrics = 2;              // System-wide metrics
}

message ContainerMetric {
    string container_id = 1;                      // Container ID
    uint64 timestamp = 2;                         // Metric timestamp
    
    // CPU metrics
    uint64 cpu_usage_usec = 3;                    // Total CPU usage in microseconds
    uint64 cpu_user_usec = 4;                     // User CPU time in microseconds
    uint64 cpu_system_usec = 5;                   // System CPU time in microseconds
    uint64 cpu_throttled_usec = 6;                // Time throttled due to limits
    
    // Memory metrics
    uint64 memory_current_bytes = 7;              // Current memory usage
    uint64 memory_peak_bytes = 8;                 // Peak memory usage
    uint64 memory_limit_bytes = 9;                // Memory limit
    uint64 memory_cache_bytes = 10;               // Page cache memory
    uint64 memory_rss_bytes = 11;                 // RSS memory
    
    // Network metrics
    uint64 network_rx_bytes = 12;                 // Bytes received
    uint64 network_tx_bytes = 13;                 // Bytes transmitted
    uint64 network_rx_packets = 14;               // Packets received
    uint64 network_tx_packets = 15;               // Packets transmitted
    
    // Disk I/O metrics
    uint64 disk_read_bytes = 16;                  // Bytes read from disk
    uint64 disk_write_bytes = 17;                 // Bytes written to disk
}

message SystemMetrics {
    uint64 timestamp = 1;                         // Metric timestamp
    uint64 memory_used_mb = 2;                    // System memory used (MB)
    uint64 memory_total_mb = 3;                   // System memory total (MB)
    uint32 cpu_count = 4;                         // Number of CPUs
    repeated double load_average = 5;             // Load average (1, 5, 15 min)
    uint64 containers_total = 6;                  // Total containers
    uint64 containers_running = 7;                // Running containers
    uint64 containers_stopped = 8;                // Stopped containers
}

message GetSystemInfoRequest {
    // Empty request
}

message GetSystemInfoResponse {
    string version = 1;                           // Quilt version
    string runtime = 2;                           // Runtime info (e.g., "linux/amd64")
    uint64 start_time = 3;                        // Server start time
    map<string, string> features = 4;             // Enabled features
    map<string, string> limits = 5;               // System limits
}

// Event streaming
message StreamEventsRequest {
    repeated string container_ids = 1;            // Filter by container IDs (empty = all)
    repeated string event_types = 2;              // Filter by event types (empty = all)
}

message ContainerEvent {
    string event_type = 1;                        // Event type (e.g., "created", "started", "died")
    string container_id = 2;                      // Container ID
    uint64 timestamp = 3;                         // Event timestamp
    map<string, string> attributes = 4;           // Event-specific attributes
}

// Container monitoring messages
message ListActiveMonitorsRequest {
    // Empty - list all active monitors
}

message ListActiveMonitorsResponse {
    repeated ProcessMonitor monitors = 1;
    bool success = 2;
    string error_message = 3;
}

message GetMonitorStatusRequest {
    string container_id = 1;
}

message GetMonitorStatusResponse {
    ProcessMonitor monitor = 1;
    bool success = 2;
    string error_message = 3;
}

message ListMonitoringProcessesRequest {
    // Empty - list all monitoring processes
}

message ListMonitoringProcessesResponse {
    repeated ProcessMonitor processes = 1;
    bool success = 2;
    string error_message = 3;
}

message ProcessMonitor {
    string container_id = 1;
    int64 pid = 2;
    string status = 3;
    uint64 started_at = 4;
    uint64 last_check = 5;
    int32 check_count = 6;
    string error_message = 7;
}

// Cleanup operation messages
message GetCleanupStatusRequest {
    string container_id = 1;  // Empty for all containers
}

message GetCleanupStatusResponse {
    repeated CleanupTask tasks = 1;
    bool success = 2;
    string error_message = 3;
}

message ListCleanupTasksRequest {
    // Empty - list all cleanup tasks
}

message ListCleanupTasksResponse {
    repeated CleanupTask tasks = 1;
    bool success = 2;
    string error_message = 3;
}

message ForceCleanupRequest {
    string container_id = 1;
}

message ForceCleanupResponse {
    bool success = 1;
    string error_message = 2;
    repeated string cleaned_resources = 3;
}

message CleanupTask {
    int64 task_id = 1;
    string container_id = 2;
    string resource_type = 3;
    string resource_path = 4;
    string status = 5;
    uint64 created_at = 6;
    uint64 completed_at = 7;
    string error_message = 8;
}

// Network allocation messages
message ListNetworkAllocationsRequest {
}

message ListNetworkAllocationsResponse {
    repeated NetworkAllocation allocations = 1;
}

message NetworkAllocation {
    string container_id = 1;
    string ip_address = 2;
    string bridge_interface = 3;
    string veth_host = 4;
    string veth_container = 5;
    bool setup_completed = 6;
    int64 allocation_time = 7;
    string status = 8;
}

// Container Network Configuration
message ContainerNetworkConfig {
    string ip_address = 1;
    string bridge_interface = 2;
    string veth_host = 3;
    string veth_container = 4;
    bool setup_completed = 5;
    string status = 6;
}

// Get Container Network Request/Response
message GetContainerNetworkRequest {
    string container_id = 1;
}

message GetContainerNetworkResponse {
    bool success = 1;
    string error_message = 2;
    ContainerNetworkConfig network_config = 3;
}

// Set Container Network Request/Response
message SetContainerNetworkRequest {
    string container_id = 1;
    ContainerNetworkConfig network_config = 2;
}

message SetContainerNetworkResponse {
    bool success = 1;
    string error_message = 2;
}

// Setup Container Network Post Start Request/Response
message SetupContainerNetworkPostStartRequest {
    string container_id = 1;
}

message SetupContainerNetworkPostStartResponse {
    bool success = 1;
    string error_message = 2;
} 